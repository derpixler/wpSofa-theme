{"version":3,"sources":["webpack:///./template-parts/player/assets/js/player.js"],"names":["localstorageHandle","require","hash","mediaPlayer","this","options","storage_key","currentPos","selectors","player","controls","startStop","progressBar","progressBarStatus","duration","players","cacheTime","collectPlayers","length","addEvents","self","selector","document","querySelectorAll","forEach","call","playerControls","playerSources","audio","querySelector","sourcesNodes","source","type","getAttribute","currentTime","push","node","sources","update","map","event","addEventListener","e","playStop","currentTarget","seek","timeupdate","playStopElem","btn","classes","classList","contains","remove","add","play","get","pause","playerTimeUpdater","currTimeElem","percent","Math","floor","style","width","dataset","progress","src","setAttribute","split","innerText","formatSecondsAsTime","secs","hr","min","sec","mouse","offsetX","offsetWidth","module","exports"],"mappings":"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","file":"player-js.chunk.js","sourcesContent":["const localstorageHandle = require( '@web-dev-media/localstorage' );\nconst hash = require( 'object-hash' );\n\nclass mediaPlayer {\n\tconstructor() {\n\t\tthis.options = {\n\t\t\tstorage_key: 'wpsofa-player-storage',\n\t\t\tcurrentPos : 0,\n\t\t\tselectors  : {\n\t\t\t\tplayer  : '.player',\n\t\t\t\tcontrols: {\n\t\t\t\t\tstartStop        : '.media-action',\n\t\t\t\t\tprogressBar      : '.progress',\n\t\t\t\t\tprogressBarStatus: '.progress .status',\n\t\t\t\t\tduration         : '.status'\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.players = [];\n\n\t\tlocalstorageHandle.options.cacheTime = -1;\n\n\t\tthis.collectPlayers();\n\n\t\tif ( this.players.length > 0 ) {\n\t\t\tthis.addEvents();\n\t\t}\n\t}\n\n\tcollectPlayers() {\n\t\tlet self = this;\n\n\t\tif ( self.options.selectors ) {\n\t\t\tlet selector = self.options.selectors.player;\n\n\t\t\tif ( selector ) {\n\t\t\t\tlet players = document.querySelectorAll( selector );\n\n\t\t\t\t[].forEach.call( players, function( player ) {\n\t\t\t\t\tlet playerControls = {};\n\t\t\t\t\tlet playerSources = {};\n\n\t\t\t\t\tlet audio = player.querySelector( 'audio' );\n\t\t\t\t\tlet sourcesNodes = audio.querySelectorAll( 'source' );\n\n\t\t\t\t\tif ( sourcesNodes ) {\n\t\t\t\t\t\t[].forEach.call( sourcesNodes, function( source ) {\n\t\t\t\t\t\t\tlet type = source.getAttribute( 'type' );\n\t\t\t\t\t\t\tplayerSources[ type ] = source.getAttribute( 'src' );\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tfor ( selector in self.options.selectors.controls ) {\n\t\t\t\t\t\t\tplayerControls[ selector ] = player.querySelector( self.options.selectors.controls[ selector ] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tplayerControls.currentTime = player.querySelector( '.current-time' );\n\n\t\t\t\t\t\tself.players.push( {\n\t\t\t\t\t\t\tnode        : player,\n\t\t\t\t\t\t\taudio       : audio,\n\t\t\t\t\t\t\tcontrols    : playerControls,\n\t\t\t\t\t\t\tsources     : playerSources,\n\t\t\t\t\t\t\tsourcesNodes: sourcesNodes,\n\t\t\t\t\t\t\thash        : hash( playerSources )\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n\n\taddEvents() {\n\t\tif ( this.players ) {\n\t\t\tthis.players.forEach( player => {\n\t\t\t\tlocalstorageHandle.update( player.hash + '_isPlaying', false );\n\n\t\t\t\t[ 'play', 'pause', 'timeupdate' ].map( event => {\n\t\t\t\t\tplayer.audio.addEventListener( event, ( e ) => this[ event ]( player ) );\n\t\t\t\t} );\n\n\t\t\t\tplayer.controls.startStop.addEventListener( 'click', ( e ) => this.playStop( e.currentTarget, player ) );\n\t\t\t\tplayer.controls.progressBar.addEventListener( 'click', ( e ) => this.seek( e, player ) );\n\n\t\t\t\tthis.timeupdate( player );\n\t\t\t} );\n\t\t}\n\t}\n\n\tplayStop( playStopElem, player ) {\n\t\tlet btn = playStopElem.querySelector( 'div' );\n\t\tconst classes = {\n\t\t\tplay : 'play',\n\t\t\tpause: 'pause'\n\t\t};\n\n\t\tif ( btn.classList.contains( classes.play ) ) {\n\t\t\tbtn.classList.remove( classes.play );\n\t\t\tbtn.classList.add( classes.pause );\n\n\t\t\tplayStopElem.classList.remove( classes.play );\n\t\t\tplayStopElem.classList.add( classes.pause );\n\n\t\t\tplayer.audio.play();\n\t\t\tplayer.audio.currentTime = localstorageHandle.get( player.hash + '_currentTime' );\n\t\t\tlocalstorageHandle.update( player.hash + '_isPlaying', true );\n\t\t} else {\n\t\t\tbtn.classList.remove( classes.pause );\n\t\t\tbtn.classList.add( classes.play );\n\n\t\t\tplayStopElem.classList.remove( classes.pause );\n\t\t\tplayStopElem.classList.add( classes.play );\n\n\t\t\tplayer.audio.pause();\n\t\t\tlocalstorageHandle.update( player.hash + '_isPlaying', false );\n\t\t}\n\t}\n\n\tplay( player ) {\n\t\tthis.playerTimeUpdater( player );\n\t}\n\n\tpause( player ) {\n\t\tthis.playerTimeUpdater( player );\n\t}\n\n\ttimeupdate( player ) {\n\t\tlet currentTime = player.audio.currentTime ? player.audio.currentTime : localstorageHandle.get( player.hash + '_currentTime' );\n\t\tlet duration = player.audio.duration ? player.audio.duration : localstorageHandle.get( player.hash + '_duration' );\n\n\t\tif ( currentTime ) {\n\t\t\tlet currTimeElem = player.controls.currentTime;\n\t\t\tlet percent = Math.floor( (\n\t\t\t\t100 / duration\n\t\t\t) * currentTime );\n\n\t\t\tplayer.controls.progressBarStatus.style.width = percent + '%';\n\n\t\t\tif ( percent > 85 ) {\n\t\t\t\tcurrTimeElem.dataset.progress = \"85\";\n\t\t\t} else if ( percent > 70 ) {\n\t\t\t\tcurrTimeElem.dataset.progress = \"70\";\n\t\t\t} else if ( percent > 45 ) {\n\t\t\t\tcurrTimeElem.dataset.progress = \"45\";\n\t\t\t} else if ( percent > 15 ) {\n\t\t\t\tcurrTimeElem.dataset.progress = \"15\";\n\t\t\t} else {\n\t\t\t\tcurrTimeElem.dataset.progress = \"0\";\n\t\t\t}\n\n\t\t\tif ( localstorageHandle.get( player.hash + '_isPlaying' ) === true && duration != null ) {\n\t\t\t\tlocalstorageHandle.update( player.hash + '_currentTime', player.audio.currentTime );\n\t\t\t\tlocalstorageHandle.update( player.hash + '_duration', player.audio.duration );\n\t\t\t}\n\n\t\t\t[].forEach.call( player.sourcesNodes, function( source ) {\n\t\t\t\tlet src = source.getAttribute( 'src' );\n\t\t\t\tsource.setAttribute( 'src', src.split( '#' )[ 0 ] + '#t=' + currentTime );\n\t\t\t} );\n\n\t\t\tthis.playerTimeUpdater( player );\n\t\t}\n\t}\n\n\tplayerTimeUpdater( player ) {\n\t\tlet currTimeElem = player.controls.currentTime;\n\t\tlet currentTime = player.audio.currentTime ? player.audio.currentTime : localstorageHandle.get( player.hash + '_currentTime' );\n\n\t\tif ( currentTime ) {\n\t\t\tcurrTimeElem.innerText = this.formatSecondsAsTime( currentTime );\n\t\t}\n\t}\n\n\tformatSecondsAsTime( secs ) {\n\t\tvar hr = Math.floor( secs / 3600 );\n\t\tvar min = Math.floor( (\n\t\t\tsecs - (\n\t\t\thr * 3600\n\t\t\t)\n\t\t) / 60 );\n\t\tvar sec = Math.floor( secs - (\n\t\t\thr * 3600\n\t\t) - (\n\t\t\tmin * 60\n\t\t) );\n\n\t\tif ( min < 10 ) {\n\t\t\tmin = \"0\" + min;\n\t\t}\n\t\tif ( sec < 10 ) {\n\t\t\tsec = \"0\" + sec;\n\t\t}\n\t\tif ( hr < 10 ) {\n\t\t\thr = \"0\" + hr;\n\t\t}\n\n\t\treturn hr + ':' + min + ':' + sec;\n\t}\n\n\tseek( mouse, player ) {\n\t\tlet percent = mouse.offsetX / player.node.offsetWidth;\n\t\tplayer.audio.currentTime = percent * player.audio.duration;\n\n\t\tlocalstorageHandle.update( player.hash + '_currentTime', player.audio.currentTime );\n\t\tlocalstorageHandle.update( player.hash + '_duration', player.audio.duration );\n\n\t\tthis.timeupdate( player );\n\t}\n\n}\n\nexports = module.exports = mediaPlayer;"],"sourceRoot":""}